name: release

on:
  push:
    branches:
      - main

permissions:
  checks: write
  statuses: write
  contents: write
  packages: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
    - name: release please
      uses: google-github-actions/release-please-action@v4
      id: release
      with:
        include-component-in-tag: true
    - name: print pr
      run: echo ${{ steps.release.outputs.pr }}
    - name: print prs
      run: echo ${{ steps.release.outputs.prs }}
    - name: get git oid for the last commit
      if: ${{ steps.release.outputs.prs_created == 'true' }}
      run: |
        QUERY='query($repo: String!, $owner: String!, $branch: String!) {
          repository(name: $repo, owner: $owner) {
            ref(qualifiedName: $branch){
              target {
                ... on Commit {
                  history(first: 1) {
                    nodes {
                      oid
                    }
                  }
                }
              }
            }
          }
        }'
        RESULT=$(gh api graphql -F repo=$REPO -F owner=$OWNER -F branch=$BRANCH -f query="$QUERY")
        OID=$(echo $RESULT | jq --raw-output '.data.repository.ref.target.history.nodes[].oid')
        echo "oid=$OID" >> $GITHUB_ENV
      env:
        GH_TOKEN: ${{ github.token }}
        OWNER: "0xdbe"
        REPO: "turborepo-test"
        BRANCH: ${{ steps.release.outputs.pr.headBranchName }}

    - name: commit new file
      if: ${{ steps.release.outputs.prs_created == 'true' }}
      run: |
        gh api graphql -F branchName=$BRANCH_NAME -f query='
          mutation { 
            createCommitOnBranch(
              input: {
                branch:
                {
                  repositoryNameWithOwner: "0xdbe/turborepo-test",
                  branchName: $branchName
                },
                message: {headline: "chore(test): commit message"},
                fileChanges: {
                  additions: {path: "hello.md", contents: "aGVsbG8="}
                }
                expectedHeadOid: ${{ env.oid }}
              }
            )
          }'
      env:
        GH_TOKEN: ${{ github.token }}
        BRANCH_NAME: ${{ steps.release.outputs.pr.headBranchName }}

    - name: print released packages
      run: echo ${{ steps.release.outputs.paths_released }}
    - name: clone repository
      uses: actions/checkout@v4
      if: ${{ steps.release.outputs.releases_created == 'true' }}
    - name: configure npm
      uses: actions/setup-node@v4
      with:
        node-version: 20
        registry-url: 'https://npm.pkg.github.com'
        scope: '@0xdbe'
        always-auth: true
      env:
        NODE_AUTH_TOKEN: ${{ github.token }}
      if: ${{ steps.release.outputs.releases_created == 'true' }}
    - name: install yarn
      run: npm install -g yarn
      if: ${{ steps.release.outputs.releases_created == 'true' }}
    - name: install dependencies
      run: yarn install
      if: ${{ steps.release.outputs.releases_created == 'true' }}
    - name: Build
      run: yarn build
      if: ${{ steps.release.outputs.releases_created == 'true' }}
    - name: Publish '@0xdbe/docs' apps
      run: yarn workspace @0xdbe/docs publish
      if: ${{ steps.release.outputs['apps/docs--release_created'] == 'true' }}
    - name: Publish '@0xdbe/web' apps
      run: yarn workspace @0xdbe/web publish
      if: ${{ steps.release.outputs['apps/web--release_created'] == 'true' }}
    - name: Publish '@0xdbe/eslint-config' package
      run: yarn workspace @0xdbe/eslint-config publish
      if: ${{ steps.release.outputs['packages/eslint-config--release_created'] == 'true' }}
    - name: Publish '@0xdbe/typescript-config' package
      run: yarn workspace @0xdbe/typescript-config publish
      if: ${{ steps.release.outputs['packages/typescript-config--release_created'] == 'true' }} 
    - name: Publish '@0xdbe/ui' package
      run: yarn workspace @0xdbe/ui publish
      if: ${{ steps.release.outputs['packages/ui--release_created'] == 'true' }} 
